Metadata-Version: 2.4
Name: discrete-algorithms-2025
Version: 1.0.0
Summary: Interactive Algorithms Dashboards for Discrete Algorithms Education
Author-email: Educational Dashboard Creator <creator@example.com>
Requires-Python: >=3.8.1
Description-Content-Type: text/markdown
Requires-Dist: streamlit>=1.28.0
Requires-Dist: networkx>=3.0
Requires-Dist: plotly>=5.15.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: scipy>=1.10.0
Requires-Dist: dash>=2.16.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"

# Interactive Educational Dashboards for Discrete Algorithms

A comprehensive collection of interactive educational dashboards for learning discrete algorithms, graph theory, probability, and data science concepts. Built with Streamlit and various visualization libraries.

## Project Overview

This repository contains interactive dashboards designed for educational purposes, covering various topics in discrete algorithms and their applications. Each dashboard provides step-by-step visualizations and interactive learning experiences.

## Available Dashboards

### 📊 Graph Algorithms Dashboard
**Location**: `Graphs/interactive_graph_dashboards.py`

Interactive graph theory concepts and algorithms with step-by-step visualizations:

- **Graph Representations**: Explore adjacency matrices, adjacency lists, and edge lists
- **Graph Traversal**: Visualize BFS and DFS algorithms with interactive step-through
- **Shortest Path**: Interactive demonstration of Dijkstra's algorithm
- **Minimum Spanning Tree**: Kruskal's algorithm with Union-Find visualization

**Run with**: `uv run streamlit run Graphs/interactive_graph_dashboards.py`

### 🔢 Discrete Algorithms Dashboard
**Location**: `Algorithms/interactive_algorithms_dashboards.py`

Fundamental algorithmic strategies and complexity analysis:

- Algorithm complexity analysis
- Sorting algorithm comparisons
- Dynamic programming examples
- Divide and conquer strategies

**Run with**: `uv run streamlit run Algorithms/interactive_algorithms_dashboards.py`

### 🎲 Probability & Monte Carlo Dashboards
**Location**: `ProbabilityMonteCarlo/` directory

Multiple dashboards covering statistical simulations and probability concepts:

- **Probability Building Blocks** (`dashboard_1_probability_building_blocks.py`): Basic probability concepts
- **Monte Carlo Pi** (`dashboard_4_monte_carlo_pi.py`): Monte Carlo simulation for π estimation
- **Brownian Motion** (`dashboard_6_brownian_motion.py`): Random walk simulations
- **Secretary Problem** (`dashboard_7_secretary_problem.py`): Optimal stopping theory

**Run with**: `uv run streamlit run ProbabilityMonteCarlo/dashboard_X_[name].py`

### 🖼️ Image Processing
**Location**: `ImageProcessing/` directory

Computer vision and image manipulation algorithms:

- Image filtering and transformation
- Edge detection algorithms
- Color space conversions
- Morphological operations

*Note: Implementation files are in development*

### 📈 Data Mining
**Location**: `DataMining/` directory

Machine learning and data analysis algorithms:

- Clustering algorithms
- Classification methods
- Dimensionality reduction
- Association rule mining

*Note: Implementation files are in development*

## Installation

This project uses `uv` for dependency management. Make sure you have `uv` installed:

```bash
# Install uv (if not already installed)
curl -LsSf https://astral.sh/uv/install.sh | sh
```

## Quick Start

1. **Install dependencies**:
   ```bash
   uv sync
   ```

2. **Run any dashboard**:
   ```bash
   # For Graph Algorithms
   uv run streamlit run Graphs/interactive_graph_dashboards.py
   
   # For Discrete Algorithms
   uv run streamlit run Algorithms/interactive_algorithms_dashboards.py
   
   # For Probability & Monte Carlo (example)
   uv run streamlit run ProbabilityMonteCarlo/dashboard_1_probability_building_blocks.py
   ```

3. **Open your browser** and navigate to `http://localhost:8501`

## Dependencies

- Python >= 3.8.1
- streamlit >= 1.28.0
- networkx >= 3.0
- plotly >= 5.15.0
- numpy >= 1.24.0
- pandas >= 2.0.0
- scipy >= 1.10.0
- matplotlib >= 3.7.0
- seaborn >= 0.12.0

## Project Structure

```
Examples_2025/
├── Algorithms/                    # Discrete algorithms dashboards
│   ├── interactive_algorithms_dashboards.py
│   └── Discrete Algorithms Tutorial Generation.md
├── Graphs/                       # Graph theory dashboards
│   ├── interactive_graph_dashboards.py
│   ├── run_dashboard.py
│   └── dashboard_summary.md
├── ProbabilityMonteCarlo/        # Probability and simulation dashboards
│   ├── dashboard_1_probability_building_blocks.py
│   ├── dashboard_4_monte_carlo_pi.py
│   ├── dashboard_6_brownian_motion.py
│   ├── dashboard_7_secretary_problem.py
│   └── dashboard_summary_table.md
├── ImageProcessing/              # Image processing algorithms
│   └── Image Processing.md
├── DataMining/                   # Data mining and ML algorithms
│   └── Data Mining Gemini.md
├── pyproject.toml               # Project configuration
├── uv.lock                      # Dependency lock file
└── README.md                    # This file
```

## Usage Guidelines

1. **Choose a Dashboard**: Each dashboard focuses on specific algorithmic concepts
2. **Interactive Learning**: Use the interactive controls to explore algorithms step-by-step
3. **Visual Feedback**: Watch real-time visualizations of algorithm execution
4. **Experiment**: Try different parameters and inputs to understand algorithm behavior

## Development

To contribute or modify the dashboards:

1. Install development dependencies: `uv sync --extra dev`
2. Run tests: `uv run python test_dashboard.py`
3. Format code: `uv run black [filename].py`
4. Lint code: `uv run flake8 [filename].py`

## Troubleshooting

If you encounter issues:

1. **Dependency errors**: Run `uv sync` to reinstall dependencies
2. **Port conflicts**: Change the port: `--server.port 8502`
3. **Browser issues**: Try accessing `http://localhost:8501` directly
4. **Module not found**: Ensure you're running from the project root directory

## Educational Resources

Each dashboard is accompanied by detailed documentation:
- `README_Graphs.md` - Detailed guide for graph algorithms
- `README_Algorithms.md` - Guide for discrete algorithms
- Individual markdown files in each directory provide specific tutorials

## License

This project is for educational purposes and is designed to support learning in discrete algorithms and computer science courses. 
